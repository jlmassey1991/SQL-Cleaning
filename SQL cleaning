-- SQL Project - Data Cleaning




-- https://####/colon_cancers-2022






SELECT * 
FROM world_colon_cancers.colon_cancers;



-- first thing we want to do is create a staging table. This is the one we will work in and clean the data. We want a table with the raw data in case something happens
CREATE TABLE world_colon_cancers.colon_cancers_staging 
LIKE world_colon_cancers.colon_cancers;

INSERT colon_cancers_staging 
SELECT * FROM world_colon_cancers.colon_cancers;


-- now when we are data cleaning we usually follow a few steps
-- 1. check for duplicates and remove any
-- 2. standardize data and fix errors
-- 3. Look at null values and see what 
-- 4. remove any columns and rows that are not necessary - few ways



-- 1. Remove Duplicates

# First let's check for duplicates



SELECT *
FROM world_colon_cancers.colon_cancers_staging
;

SELECT stage, agression_status, total_colon_cancer,`date`,
		ROW_NUMBER() OVER (
			PARTITION BY stage, agression_status, total_colon_cancer,`date`) AS row_num
	FROM 
		world_colon_cancers.colon_cancers_staging;



SELECT *
FROM (
	SELECT stage, agression_status, total_colon_cancer,`date`,
		ROW_NUMBER() OVER (
			PARTITION BY stage, agression_status, total_colon_cancer,`date`
			) AS row_num
	FROM 
		world_colon_cancers.colon_cancers_staging
) duplicates
WHERE 
	row_num > 1;
    
-- let's just look at oda to confirm
SELECT *
FROM world_colon_cancers.colon_cancers_staging
WHERE stage = 'Oda'
;
-- it looks like these are all legitimate entries and shouldn't be deleted. We need to really look at every single row to be accurate

-- these are our real duplicates 
SELECT *
FROM (
	SELECT stage, location, agression_status, total_colon_cancer,percentage_colon_cancer,`date`, stage, state, funds_raised_millions,
		ROW_NUMBER() OVER (
			PARTITION BY stage, location, agression_status, total_colon_cancer,percentage_colon_cancer,`date`, stage, state, funds_raised_millions
			) AS row_num
	FROM 
		world_colon_cancers.colon_cancers_staging
) duplicates
WHERE 
	row_num > 1;

-- these are the ones we want to delete where the row number is > 1 or 2or greater essentially

-- now you may want to write it like this:
WITH DELETE_CTE AS 
(
SELECT *
FROM (
	SELECT stage, location, agression_status, total_colon_cancer,percentage_colon_cancer,`date`, stage, state, funds_raised_millions,
		ROW_NUMBER() OVER (
			PARTITION BY stage, location, agression_status, total_colon_cancer,percentage_colon_cancer,`date`, stage, state, funds_raised_millions
			) AS row_num
	FROM 
		world_colon_cancers.colon_cancers_staging
) duplicates
WHERE 
	row_num > 1
)
DELETE
FROM DELETE_CTE
;


WITH DELETE_CTE AS (
	SELECT stage, location, agression_status, total_colon_cancer, percentage_colon_cancer, `date`, stage, state, funds_raised_millions, 
    ROW_NUMBER() OVER (PARTITION BY stage, location, agression_status, total_colon_cancer, percentage_colon_cancer, `date`, stage, state, funds_raised_millions) AS row_num
	FROM world_colon_cancers.colon_cancers_staging
)
DELETE FROM world_colon_cancers.colon_cancers_staging
WHERE (stage, location, agression_status, total_colon_cancer, percentage_colon_cancer, `date`, stage, state, funds_raised_millions, row_num) IN (
	SELECT stage, location, agression_status, total_colon_cancer, percentage_colon_cancer, `date`, stage, state, funds_raised_millions, row_num
	FROM DELETE_CTE
) AND row_num > 1;

-- one solution, which I think is a good one. Is to create a new column and add those row numbers in. Then delete where row numbers are over 2, then delete that column
-- so let's do it!!

ALTER TABLE world_colon_cancers.colon_cancers_staging ADD row_num INT;


SELECT *
FROM world_colon_cancers.colon_cancers_staging
;

CREATE TABLE `world_colon_cancers`.`colon_cancers_staging2` (
`stage` text,
`location`text,
`agression_status`text,
`total_colon_cancer` INT,
`percentage_colon_cancer` text,
`date` text,
`stage`text,
`state` text,
`funds_raised_millions` int,
row_num INT
);

INSERT INTO `world_colon_cancers`.`colon_cancers_staging2`
(`stage`,
`location`,
`agression_status`,
`total_colon_cancer`,
`percentage_colon_cancer`,
`date`,
`stage`,
`state`,
`funds_raised_millions`,
`row_num`)
SELECT `stage`,
`location`,
`agression_status`,
`total_colon_cancer`,
`percentage_colon_cancer`,
`date`,
`stage`,
`state`,
`funds_raised_millions`,
		ROW_NUMBER() OVER (
			PARTITION BY stage, location, agression_status, total_colon_cancer,percentage_colon_cancer,`date`, stage, state, funds_raised_millions
			) AS row_num
	FROM 
		world_colon_cancers.colon_cancers_staging;

-- now that we have this we can delete rows were row_num is greater than 2

DELETE FROM world_colon_cancers.colon_cancers_staging2
WHERE row_num >= 2;







-- 2. Standardize Data

SELECT * 
FROM world_colon_cancers.colon_cancers_staging2;

-- if we look at agression_status it looks like we have some null and empty rows, let's take a look at these
SELECT DISTINCT agression_status
FROM world_colon_cancers.colon_cancers_staging2
ORDER BY agression_status;

SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE agression_status IS NULL 
OR agression_status = ''
ORDER BY agression_status;

-- let's take a look at these
SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE stage LIKE 'one%';

SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE stage LIKE 'two%';

SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE stage LIKE 'three%';

-- nothing wrong here
SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE stage LIKE 'four%';

-- it looks like four isn't populated.
-- I'm sure it's the same for the others. What we can do is
-- write a query that if there is another row with the same stage name, it will update it to the non-null agression_status values
-- makes it easy so if there were thousands we wouldn't have to manually check them all

-- we should set the blanks to nulls since those are typically easier to work with
UPDATE world_colon_cancers.colon_cancers_staging2
SET agression_status = NULL
WHERE agression_status = '';

-- now if we check those are all null

SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE agression_status IS NULL 
OR agression_status = ''
ORDER BY agression_status;

-- now we need to populate those nulls if possible

UPDATE colon_cancers_staging2 t1
JOIN colon_cancers_staging2 t2
ON t1.stage = t2.stage
SET t1.agression_status = t2.agression_status
WHERE t1.agression_status IS NULL
AND t2.agression_status IS NOT NULL;

-- and if we check it looks like stages one was the only one without a populated row to populate this null values
SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE agression_status IS NULL 
OR agression_status = ''
ORDER BY agression_status;

-- ---------------------------------------------------

-- I also noticed the yes has multiple different variations. We need to standardize that - let's say all to yes
SELECT DISTINCT agression_status
FROM world_colon_cancers.colon_cancers_staging2
ORDER BY agression_status;

UPDATE colon_cancers_staging2
SET agression_status = 'yes'
WHERE agression_status IN ('yes');

-- now that's taken care of:
SELECT DISTINCT agression_status
FROM world_colon_cancers.colon_cancers_staging2
ORDER BY agression_status;

-- --------------------------------------------------
-- we also need to look at 

SELECT *
FROM world_colon_cancers.colon_cancers_staging2;

-- everything looks good except apparently we have some "Georgia" and some "Georgia." with a period at the end. Let's standardize this.
SELECT DISTINCT state
FROM world_colon_cancers.colon_cancers_staging2
ORDER BY state;

UPDATE colon_cancers_staging2
SET state = TRIM(TRAILING '.' FROM state);

-- now if we run this again it is fixed
SELECT DISTINCT state
FROM world_colon_cancers.colon_cancers_staging2
ORDER BY state;


-- Let's also fix the date columns:
SELECT *
FROM world_colon_cancers.colon_cancers_staging2;

-- we can use str to date to update this field
UPDATE colon_cancers_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

-- now we can convert the data type properly
ALTER TABLE colon_cancers_staging2
MODIFY COLUMN `date` DATE;


SELECT *
FROM world_colon_cancers.colon_cancers_staging2;





-- 3. Look at Null Values

-- the null values in total_colon_cancer, percentage_colon_cancer, and funds_raised_millions all look normal. I don't think I want to change that
-- I like having them null because it makes it easier for calculations during the EDA phase

-- so there isn't anything I want to change with the null values




-- 4. remove any columns and rows we need to

SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE total_colon_cancer IS NULL;


SELECT *
FROM world_colon_cancers.colon_cancers_staging2
WHERE total_colon_cancer IS NULL
AND percentage_colon_cancer IS NULL;

-- Delete Useless data we can't really use
DELETE FROM world_colon_cancers.colon_cancers_staging2
WHERE total_colon_cancer IS NULL
AND percentage_colon_cancer IS NULL;

SELECT * 
FROM world_colon_cancers.colon_cancers_staging2;

ALTER TABLE colon_cancers_staging2
DROP COLUMN row_num;


SELECT * 
FROM world_colon_cancers.colon_cancers_staging2;
